apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

static def buildTime() {
    return new Date().format("yyyyMMdd");
}
//app壳工程   https://blog.csdn.net/gpf1320253667/article/details/101673535
android {

    signingConfigs {
        release {
//            keyAlias 'guiying712'
//            keyPassword 'guiying712'
//            storeFile file('/mykey.jks')
//            storePassword 'guiying712'
        }
    }


    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //阿里路由框架配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "AROUTER_MODULE_NAME"  : project.getName(),
                        "room.schemaLocation"  : "$projectDir/assets/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"]
            }
        }
        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi', 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
        //打包时间
        resValue "string", "build_time", buildTime()
    }

    buildTypes {
        debug {
            //给applicationId添加后缀“.debug”
            applicationIdSuffix ".debug"
            //manifestPlaceholders = [app_icon: "@drawable/launch_beta"]
            buildConfigField "boolean", "LOG_DEBUG", "true"
            zipAlignEnabled false
            shrinkResources false
            minifyEnabled false
            debuggable true
        }
        release {
            //更改AndroidManifest.xml中预先定义好占位符信息
            //manifestPlaceholders = [app_icon: "@drawable/icon"]
            // 不显示Log
            buildConfigField "boolean", "LEO_DEBUG", "false"
            //是否zip对齐
            zipAlignEnabled true
            // 缩减resource文件
            shrinkResources true
            //Proguard 混淆
            minifyEnabled true
            //混淆规则
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //签名
            signingConfig signingConfigs.release
        }
    }
    sourceSets {
        main {
            // 1.单独调试与集成调试时使用不同的 AndroidManifest.xml 文件
            // 我们还可以根据不同工程配置不同的 Java 源代码、不同的 resource 资源文件等的
            assets.srcDirs = ['src/main/assets', 'src/main/assets/']
            jniLibs.srcDirs = ['libs']
            if (isModule.toBoolean()) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    exclude 'debug/**'
                }
            }
        }
    }
    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }

    //开启viewBinding
    buildFeatures {
        viewBinding true
        // dataBinding 支持
//        dataBinding = true
    }
}
dependencies {
    //引入自定义的lib
    implementation fileTree(dir: "libs", include: ["*.jar"])

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    //    依赖公用模块
    api project(':lib_common')
    api project(':lib_view')
    kapt rootProject.ext.libARouterCompiler
    //注解 room数据库
    kapt rootProject.ext.annotationProcessorLibs

}
